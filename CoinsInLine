const int MAX_N = 100;

void printMoves(int P[][MAX_N], int A[], int N) {
    int sum1 = 0, sum2 = 0;
    int m = 0, n = N-1;
    bool myTurn = true;
    while (m <=n) {
        int P1 = P[m+1][n];//the value the opponent can get if I take m
        int P2 = P[m][n-1];
        if (P1 <=P2) {
            cout << m+1<<"("<<A[m]<<")"<<endl;
            m++;
        }
        else  {
            cout << n+1<<"(" <<A[n]<<")"<<endl;
            n--;
        }
        myTurn=!myTurn;
    }
    cout <<"\nThe total amount I can get is " << P[0][N-1]<<endl;
}

int maxMoney(int A[], int N) {
    int matrix[MAX_N][MAX_N] = {0};
    int a, b ,c;
    for (int i = 0; i < N; ++i) {
        for (int m = 0, n = i; n < N; ++m,++n) {
            assert(m < N);
            assert(n < N);
            a = (m+2)<N? matrix[m+2][n]:0;
            b = ((m+1<N) && (n-1)>=0) ? matrix[m+1][n-1]:0;
            c = (n-2)>=0? matrix[m][n-2]:0;
            matrix[m][n]= std::max(A[m] + std::min(a,b),
                                    A[n] + std::min(b,c));
        }
    }
    printMoves(matrix,A,N);
    return matrix[0][N-1];
}
